{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "orderUid",
          "type": "bytes"
        }
      ],
      "name": "filledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "filledAmount(bytes)": "2479fb6e"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"orderUid\",\"type\":\"bytes\"}],\"name\":\"filledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"CoW Swap Developers\",\"details\":\"This interface collects the functions of the CoW Swap settlement contract that are used by the ETH flow contract.\",\"kind\":\"dev\",\"methods\":{\"filledAmount(bytes)\":{\"details\":\"Map each user order by UID to the amount that has been filled so far. If this amount is larger than or equal to the amount traded in the order (amount sold for sell orders, amount bought for buy orders) then the order cannot be traded anymore. If the order is fill or kill, then this value is only used to determine whether the order has already been executed.\"}},\"title\":\"CoW Swap Settlement Contract Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/ICoWSwapSettlement.sol\":\"ICoWSwapSettlement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/interfaces/ICoWSwapSettlement.sol\":{\"keccak256\":\"0x45ad8dfd8a091409438ef2437bf4f3b94eaa16c5d5e637f6831022dfa4827124\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5dec7c866e994efafea5c6d9fc8196feb5837d1a75282ffd50cc94233f25879d\",\"dweb:/ipfs/QmTsAzgsmz5JEkrNfBhqSmYdVSkvMEd8mVM1hHzi5d8MqK\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.16+commit.07a7930e"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "orderUid",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "filledAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "filledAmount(bytes)": {
            "details": "Map each user order by UID to the amount that has been filled so far. If this amount is larger than or equal to the amount traded in the order (amount sold for sell orders, amount bought for buy orders) then the order cannot be traded anymore. If the order is fill or kill, then this value is only used to determine whether the order has already been executed."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 1000000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/ICoWSwapSettlement.sol": "ICoWSwapSettlement"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/ICoWSwapSettlement.sol": {
        "keccak256": "0x45ad8dfd8a091409438ef2437bf4f3b94eaa16c5d5e637f6831022dfa4827124",
        "urls": [
          "bzz-raw://5dec7c866e994efafea5c6d9fc8196feb5837d1a75282ffd50cc94233f25879d",
          "dweb:/ipfs/QmTsAzgsmz5JEkrNfBhqSmYdVSkvMEd8mVM1hHzi5d8MqK"
        ],
        "license": "LGPL-3.0-or-later"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/ICoWSwapSettlement.sol",
    "id": 21465,
    "exportedSymbols": {
      "ICoWSwapSettlement": [
        21464
      ]
    },
    "nodeType": "SourceUnit",
    "src": "46:756:9",
    "nodes": [
      {
        "id": 21454,
        "nodeType": "PragmaDirective",
        "src": "46:21:9",
        "literals": [
          "solidity",
          "^",
          "0.8"
        ]
      },
      {
        "id": 21464,
        "nodeType": "ContractDefinition",
        "src": "278:523:9",
        "nodes": [
          {
            "id": 21463,
            "nodeType": "FunctionDefinition",
            "src": "727:72:9",
            "documentation": {
              "id": 21456,
              "nodeType": "StructuredDocumentation",
              "src": "313:409:9",
              "text": "@dev Map each user order by UID to the amount that has been filled so\n far. If this amount is larger than or equal to the amount traded in the\n order (amount sold for sell orders, amount bought for buy orders) then\n the order cannot be traded anymore. If the order is fill or kill, then\n this value is only used to determine whether the order has already been\n executed."
            },
            "functionSelector": "2479fb6e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "filledAmount",
            "nameLocation": "736:12:9",
            "parameters": {
              "id": 21459,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21458,
                  "mutability": "mutable",
                  "name": "orderUid",
                  "nameLocation": "762:8:9",
                  "nodeType": "VariableDeclaration",
                  "scope": 21463,
                  "src": "749:21:9",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 21457,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "749:5:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "748:23:9"
            },
            "returnParameters": {
              "id": 21462,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21461,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 21463,
                  "src": "790:7:9",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 21460,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "790:7:9",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "789:9:9"
            },
            "scope": 21464,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ICoWSwapSettlement",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 21455,
          "nodeType": "StructuredDocumentation",
          "src": "69:209:9",
          "text": "@title CoW Swap Settlement Contract Interface\n @author CoW Swap Developers\n @dev This interface collects the functions of the CoW Swap settlement contract that are used by the ETH flow\n contract."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          21464
        ],
        "name": "ICoWSwapSettlement",
        "nameLocation": "288:18:9",
        "scope": 21465,
        "usedErrors": []
      }
    ],
    "license": "LGPL-3.0-or-later"
  },
  "id": 9
}