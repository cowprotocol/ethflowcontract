{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "orderUid",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "refunder",
          "type": "address"
        }
      ],
      "name": "OrderRefund",
      "type": "event"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"orderUid\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"refunder\",\"type\":\"address\"}],\"name\":\"OrderRefund\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"CoW Swap Developers\",\"events\":{\"OrderRefund(bytes,address)\":{\"details\":\"Event emitted to notify that an order was refunded. Note that this event is not fired every time the order is invalidated (even though the user receives all unspent ETH back). This is because we want to differenciate the case where the user invalidates a valid order and when the user receives back the funds from an expired order.\",\"params\":{\"orderUid\":\"CoW Swap's unique order identifier of the order that has been invalidated (and refunded).\",\"refunder\":\"The address that triggered the order refund.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"CoW Swap ETH Flow Event Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/ICoWSwapEthFlow.sol\":\"ICoWSwapEthFlowEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/interfaces/ICoWSwapEthFlow.sol\":{\"keccak256\":\"0x0b96c0c90c8560ef10a0acea608e9963264817d68ddf055f9bbeec0e3d8674cc\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://cea7ba8506406d7e13a84ddca2b7ba9a0f8ee1429dceeea8cb13be3c2ad0904c\",\"dweb:/ipfs/QmaTxrUnxWUPgZExA7mEf1dSoic3oQobt3nDVGnqe47e5z\"]},\"src/libraries/EthFlowOrder.sol\":{\"keccak256\":\"0x18b62c81df935c3e2214d982ddfb362382611c4375d4e59e0d3b33dad85e3756\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5ff06800a491f09428351cbf64394d90ee3537262484d7bcd501df44cc74e525\",\"dweb:/ipfs/Qmeuo6ewhbAKfY1mpZfXt4vx1FW67htrAZqQVFnDWknsQy\"]},\"src/vendored/GPv2Order.sol\":{\"keccak256\":\"0x0ce12e72d13c34c1d255d7e5945421e8129e7bea5d93a80f63acf8461535cdc2\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://53a307b0402ecf0b01df8b0cff874c73e7ba79828b7ffb4de27dc324f463b3e4\",\"dweb:/ipfs/QmWdrYo5bGQjKJKJ4p6chrr4UZzuWVi3stFMHHC3rmDgYR\"]},\"src/vendored/IERC20.sol\":{\"keccak256\":\"0xcbe49e308e3aecb1ee9fe6a7c412a4d65790a03d676a2e06f6a73c8de7b4f83c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a49944b2e03bf8fe6594b9a8cb250d60adf56f88551240982e7a029bfc327738\",\"dweb:/ipfs/QmWjmaZuXwj8zWvgoUng9crWZhAFpLnYciyEnUjFeKbzog\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.16+commit.07a7930e"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "orderUid",
              "type": "bytes",
              "indexed": false
            },
            {
              "internalType": "address",
              "name": "refunder",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OrderRefund",
          "anonymous": false
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":forge-std/=lib/forge-std/src/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 1000000
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/ICoWSwapEthFlow.sol": "ICoWSwapEthFlowEvents"
      },
      "libraries": {}
    },
    "sources": {
      "src/interfaces/ICoWSwapEthFlow.sol": {
        "keccak256": "0x0b96c0c90c8560ef10a0acea608e9963264817d68ddf055f9bbeec0e3d8674cc",
        "urls": [
          "bzz-raw://cea7ba8506406d7e13a84ddca2b7ba9a0f8ee1429dceeea8cb13be3c2ad0904c",
          "dweb:/ipfs/QmaTxrUnxWUPgZExA7mEf1dSoic3oQobt3nDVGnqe47e5z"
        ],
        "license": "LGPL-3.0-or-later"
      },
      "src/libraries/EthFlowOrder.sol": {
        "keccak256": "0x18b62c81df935c3e2214d982ddfb362382611c4375d4e59e0d3b33dad85e3756",
        "urls": [
          "bzz-raw://5ff06800a491f09428351cbf64394d90ee3537262484d7bcd501df44cc74e525",
          "dweb:/ipfs/Qmeuo6ewhbAKfY1mpZfXt4vx1FW67htrAZqQVFnDWknsQy"
        ],
        "license": "LGPL-3.0-or-later"
      },
      "src/vendored/GPv2Order.sol": {
        "keccak256": "0x0ce12e72d13c34c1d255d7e5945421e8129e7bea5d93a80f63acf8461535cdc2",
        "urls": [
          "bzz-raw://53a307b0402ecf0b01df8b0cff874c73e7ba79828b7ffb4de27dc324f463b3e4",
          "dweb:/ipfs/QmWdrYo5bGQjKJKJ4p6chrr4UZzuWVi3stFMHHC3rmDgYR"
        ],
        "license": "LGPL-3.0-or-later"
      },
      "src/vendored/IERC20.sol": {
        "keccak256": "0xcbe49e308e3aecb1ee9fe6a7c412a4d65790a03d676a2e06f6a73c8de7b4f83c",
        "urls": [
          "bzz-raw://a49944b2e03bf8fe6594b9a8cb250d60adf56f88551240982e7a029bfc327738",
          "dweb:/ipfs/QmWjmaZuXwj8zWvgoUng9crWZhAFpLnYciyEnUjFeKbzog"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/ICoWSwapEthFlow.sol",
    "id": 24513,
    "exportedSymbols": {
      "EthFlowOrder": [
        24744
      ],
      "GPv2Order": [
        24981
      ],
      "ICoWSwapEthFlow": [
        24512
      ],
      "ICoWSwapEthFlowEvents": [
        24436
      ],
      "IERC20": [
        25059
      ]
    },
    "nodeType": "SourceUnit",
    "src": "46:5128:25",
    "nodes": [
      {
        "id": 24426,
        "nodeType": "PragmaDirective",
        "src": "46:21:25",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8"
        ]
      },
      {
        "id": 24427,
        "nodeType": "ImportDirective",
        "src": "69:39:25",
        "nodes": [],
        "absolutePath": "src/libraries/EthFlowOrder.sol",
        "file": "../libraries/EthFlowOrder.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24513,
        "sourceUnit": 24745,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 24436,
        "nodeType": "ContractDefinition",
        "src": "187:660:25",
        "nodes": [
          {
            "id": 24435,
            "nodeType": "EventDefinition",
            "src": "785:60:25",
            "nodes": [],
            "anonymous": false,
            "documentation": {
              "id": 24429,
              "nodeType": "StructuredDocumentation",
              "src": "225:555:25",
              "text": "@dev Event emitted to notify that an order was refunded. Note that this event is not fired every time the order\n is invalidated (even though the user receives all unspent ETH back). This is because we want to differenciate\n the case where the user invalidates a valid order and when the user receives back the funds from an expired\n order.\n @param orderUid CoW Swap's unique order identifier of the order that has been invalidated (and refunded).\n @param refunder The address that triggered the order refund."
            },
            "eventSelector": "195271068a288191e4b265c641a56b9832919f69e9e7d6c2f31ba40278aeb85a",
            "name": "OrderRefund",
            "nameLocation": "791:11:25",
            "parameters": {
              "id": 24434,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24431,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "orderUid",
                  "nameLocation": "809:8:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24435,
                  "src": "803:14:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 24430,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "803:5:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24433,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "refunder",
                  "nameLocation": "835:8:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24435,
                  "src": "819:24:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 24432,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "819:7:25",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "802:42:25"
            }
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ICoWSwapEthFlowEvents",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 24428,
          "nodeType": "StructuredDocumentation",
          "src": "110:77:25",
          "text": "@title CoW Swap ETH Flow Event Interface\n @author CoW Swap Developers"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          24436
        ],
        "name": "ICoWSwapEthFlowEvents",
        "nameLocation": "197:21:25",
        "scope": 24513,
        "usedErrors": []
      },
      {
        "id": 24512,
        "nodeType": "ContractDefinition",
        "src": "920:4253:25",
        "nodes": [
          {
            "id": 24444,
            "nodeType": "ErrorDefinition",
            "src": "1118:45:25",
            "nodes": [],
            "documentation": {
              "id": 24440,
              "nodeType": "StructuredDocumentation",
              "src": "977:136:25",
              "text": "@dev Error thrown when trying to create a new order whose order hash is the same as an order hash that was\n already assigned."
            },
            "errorSelector": "56a1d2b2",
            "name": "OrderIsAlreadyOwned",
            "nameLocation": "1124:19:25",
            "parameters": {
              "id": 24443,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24442,
                  "mutability": "mutable",
                  "name": "orderHash",
                  "nameLocation": "1152:9:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24444,
                  "src": "1144:17:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 24441,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1144:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1143:19:25"
            }
          },
          {
            "id": 24447,
            "nodeType": "ErrorDefinition",
            "src": "1272:30:25",
            "nodes": [],
            "documentation": {
              "id": 24445,
              "nodeType": "StructuredDocumentation",
              "src": "1169:98:25",
              "text": "@dev Error thrown when trying to create an order that would be expired at the time of creation"
            },
            "errorSelector": "89bb2601",
            "name": "OrderIsAlreadyExpired",
            "nameLocation": "1278:21:25",
            "parameters": {
              "id": 24446,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1299:2:25"
            }
          },
          {
            "id": 24450,
            "nodeType": "ErrorDefinition",
            "src": "1426:27:25",
            "nodes": [],
            "documentation": {
              "id": 24448,
              "nodeType": "StructuredDocumentation",
              "src": "1308:113:25",
              "text": "@dev Error thrown when trying to create an order without sending the expected amount of ETH to this contract."
            },
            "errorSelector": "8b6ebb4d",
            "name": "IncorrectEthAmount",
            "nameLocation": "1432:18:25",
            "parameters": {
              "id": 24449,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1450:2:25"
            }
          },
          {
            "id": 24453,
            "nodeType": "ErrorDefinition",
            "src": "1540:33:25",
            "nodes": [],
            "documentation": {
              "id": 24451,
              "nodeType": "StructuredDocumentation",
              "src": "1459:76:25",
              "text": "@dev Error thrown when trying to create an order with a sell amount == 0"
            },
            "errorSelector": "eaec5c9d",
            "name": "NotAllowedZeroSellAmount",
            "nameLocation": "1546:24:25",
            "parameters": {
              "id": 24452,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1570:2:25"
            }
          },
          {
            "id": 24458,
            "nodeType": "ErrorDefinition",
            "src": "1657:53:25",
            "nodes": [],
            "documentation": {
              "id": 24454,
              "nodeType": "StructuredDocumentation",
              "src": "1579:73:25",
              "text": "@dev Error thrown if trying to invalidate an order while not allowed."
            },
            "errorSelector": "f8cc70ce",
            "name": "NotAllowedToInvalidateOrder",
            "nameLocation": "1663:27:25",
            "parameters": {
              "id": 24457,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24456,
                  "mutability": "mutable",
                  "name": "orderHash",
                  "nameLocation": "1699:9:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24458,
                  "src": "1691:17:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 24455,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1691:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1690:19:25"
            }
          },
          {
            "id": 24461,
            "nodeType": "ErrorDefinition",
            "src": "1789:26:25",
            "nodes": [],
            "documentation": {
              "id": 24459,
              "nodeType": "StructuredDocumentation",
              "src": "1716:68:25",
              "text": "@dev Error thrown when unsuccessfully sending ETH to an address."
            },
            "errorSelector": "6d963f88",
            "name": "EthTransferFailed",
            "nameLocation": "1795:17:25",
            "parameters": {
              "id": 24460,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1812:2:25"
            }
          },
          {
            "id": 24470,
            "nodeType": "FunctionDefinition",
            "src": "2281:124:25",
            "nodes": [],
            "documentation": {
              "id": 24462,
              "nodeType": "StructuredDocumentation",
              "src": "1821:455:25",
              "text": "@dev Function that creates and broadcasts an ETH flow order that sells native ETH. The order is paid for when\n the caller sends out the transaction. The caller takes ownership of the new order.\n @param order The data describing the order to be created. See [`EthFlowOrder.Data`] for extra information on\n each parameter.\n @return orderHash The hash of the CoW Swap order that is created to settle the new ETH order."
            },
            "functionSelector": "322bba21",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createOrder",
            "nameLocation": "2290:11:25",
            "parameters": {
              "id": 24466,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24465,
                  "mutability": "mutable",
                  "name": "order",
                  "nameLocation": "2329:5:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24470,
                  "src": "2302:32:25",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Data_$24668_calldata_ptr",
                    "typeString": "struct EthFlowOrder.Data"
                  },
                  "typeName": {
                    "id": 24464,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 24463,
                      "name": "EthFlowOrder.Data",
                      "nameLocations": [
                        "2302:12:25",
                        "2315:4:25"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 24668,
                      "src": "2302:17:25"
                    },
                    "referencedDeclaration": 24668,
                    "src": "2302:17:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Data_$24668_storage_ptr",
                      "typeString": "struct EthFlowOrder.Data"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2301:34:25"
            },
            "returnParameters": {
              "id": 24469,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24468,
                  "mutability": "mutable",
                  "name": "orderHash",
                  "nameLocation": "2394:9:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24470,
                  "src": "2386:17:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 24467,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2386:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2385:19:25"
            },
            "scope": 24512,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 24478,
            "nodeType": "FunctionDefinition",
            "src": "2837:108:25",
            "nodes": [],
            "documentation": {
              "id": 24471,
              "nodeType": "StructuredDocumentation",
              "src": "2411:421:25",
              "text": "@dev Marks existing ETH-flow orders as invalid and, for each order, refunds the ETH that hasn't been traded yet.\n The function call will not revert, if some orders are not refundable. It will silently ignore these orders.\n Note that some parameters of the orders are ignored, as for example the order expiration date and the quote id.\n @param orderArray Array of orders to be invalidated."
            },
            "functionSelector": "4cb76498",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "invalidateOrdersIgnoringNotAllowed",
            "nameLocation": "2846:34:25",
            "parameters": {
              "id": 24476,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24475,
                  "mutability": "mutable",
                  "name": "orderArray",
                  "nameLocation": "2919:10:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24478,
                  "src": "2890:39:25",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Data_$24668_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct EthFlowOrder.Data[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 24473,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 24472,
                        "name": "EthFlowOrder.Data",
                        "nameLocations": [
                          "2890:12:25",
                          "2903:4:25"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 24668,
                        "src": "2890:17:25"
                      },
                      "referencedDeclaration": 24668,
                      "src": "2890:17:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Data_$24668_storage_ptr",
                        "typeString": "struct EthFlowOrder.Data"
                      }
                    },
                    "id": 24474,
                    "nodeType": "ArrayTypeName",
                    "src": "2890:19:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_Data_$24668_storage_$dyn_storage_ptr",
                      "typeString": "struct EthFlowOrder.Data[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2880:55:25"
            },
            "returnParameters": {
              "id": 24477,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2944:0:25"
            },
            "scope": 24512,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 24485,
            "nodeType": "FunctionDefinition",
            "src": "3231:68:25",
            "nodes": [],
            "documentation": {
              "id": 24479,
              "nodeType": "StructuredDocumentation",
              "src": "2951:275:25",
              "text": "@dev Marks an existing ETH-flow order as invalid and refunds the ETH that hasn't been traded yet.\n Note that some parameters of the orders are ignored, as for example the order expiration date and the quote id.\n @param order Order to be invalidated."
            },
            "functionSelector": "7bc41b96",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "invalidateOrder",
            "nameLocation": "3240:15:25",
            "parameters": {
              "id": 24483,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24482,
                  "mutability": "mutable",
                  "name": "order",
                  "nameLocation": "3283:5:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24485,
                  "src": "3256:32:25",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Data_$24668_calldata_ptr",
                    "typeString": "struct EthFlowOrder.Data"
                  },
                  "typeName": {
                    "id": 24481,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 24480,
                      "name": "EthFlowOrder.Data",
                      "nameLocations": [
                        "3256:12:25",
                        "3269:4:25"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 24668,
                      "src": "3256:17:25"
                    },
                    "referencedDeclaration": 24668,
                    "src": "3256:17:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Data_$24668_storage_ptr",
                      "typeString": "struct EthFlowOrder.Data"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3255:34:25"
            },
            "returnParameters": {
              "id": 24484,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3298:0:25"
            },
            "scope": 24512,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 24495,
            "nodeType": "FunctionDefinition",
            "src": "4169:135:25",
            "nodes": [],
            "documentation": {
              "id": 24486,
              "nodeType": "StructuredDocumentation",
              "src": "3305:859:25",
              "text": "@dev EIP1271-compliant onchain signature verification function.\n This function is used by the CoW Swap settlement contract to determine if an order that is signed with an\n EIP1271 signature is valid. As this contract has approved the vault relayer contract, a valid signature for an\n order means that the order can be traded on CoW Swap.\n @param orderHash Hash of the order to be signed. This is the EIP-712 signing hash for the specified order as\n defined in the CoW Swap settlement contract.\n @param signature Signature byte array. This parameter is unused since as all information needed to verify if an\n order is already available onchain.\n @return magicValue Either the EIP-1271 \"magic value\" indicating success (0x1626ba7e) or a different value\n indicating failure (0xffffffff)."
            },
            "functionSelector": "1626ba7e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isValidSignature",
            "nameLocation": "4178:16:25",
            "parameters": {
              "id": 24491,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24488,
                  "mutability": "mutable",
                  "name": "orderHash",
                  "nameLocation": "4203:9:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24495,
                  "src": "4195:17:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 24487,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4195:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24490,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "4227:9:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24495,
                  "src": "4214:22:25",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 24489,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "4214:5:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4194:43:25"
            },
            "returnParameters": {
              "id": 24494,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24493,
                  "mutability": "mutable",
                  "name": "magicValue",
                  "nameLocation": "4292:10:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24495,
                  "src": "4285:17:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 24492,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "4285:6:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4284:19:25"
            },
            "scope": 24512,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 24499,
            "nodeType": "FunctionDefinition",
            "src": "4493:28:25",
            "nodes": [],
            "documentation": {
              "id": 24496,
              "nodeType": "StructuredDocumentation",
              "src": "4310:116:25",
              "text": "@dev This function reads the  chain's native token balance of this contract (e.g., ETH for mainnet) and converts"
            },
            "functionSelector": "4c84c1c8",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "wrapAll",
            "nameLocation": "4502:7:25",
            "parameters": {
              "id": 24497,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4509:2:25"
            },
            "returnParameters": {
              "id": 24498,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4520:0:25"
            },
            "scope": 24512,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 24505,
            "nodeType": "FunctionDefinition",
            "src": "4813:39:25",
            "nodes": [],
            "documentation": {
              "id": 24500,
              "nodeType": "StructuredDocumentation",
              "src": "4527:281:25",
              "text": "@dev This function takes the specified amount of the chain's native token (e.g., ETH for mainnet) stored by this\n contract and converts it to its wrapped version (e.g., WETH).\n @param amount The amount of native tokens to convert to wrapped native tokens."
            },
            "functionSelector": "ea598cb0",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "wrap",
            "nameLocation": "4822:4:25",
            "parameters": {
              "id": 24503,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24502,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "4835:6:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24505,
                  "src": "4827:14:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24501,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4827:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4826:16:25"
            },
            "returnParameters": {
              "id": 24504,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4851:0:25"
            },
            "scope": 24512,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 24511,
            "nodeType": "FunctionDefinition",
            "src": "5130:41:25",
            "nodes": [],
            "documentation": {
              "id": 24506,
              "nodeType": "StructuredDocumentation",
              "src": "4858:267:25",
              "text": "@dev This function takes the specified amount of the chain's wrapped native token (e.g., WETH for mainnet)\n and converts it to its unwrapped version (e.g., ETH).\n @param amount The amount of wrapped native tokens to convert to native tokens."
            },
            "functionSelector": "de0e9a3e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "unwrap",
            "nameLocation": "5139:6:25",
            "parameters": {
              "id": 24509,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24508,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "5154:6:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 24511,
                  "src": "5146:14:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 24507,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "5146:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5145:16:25"
            },
            "returnParameters": {
              "id": 24510,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5170:0:25"
            },
            "scope": 24512,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 24438,
              "name": "ICoWSwapEthFlowEvents",
              "nameLocations": [
                "949:21:25"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 24436,
              "src": "949:21:25"
            },
            "id": 24439,
            "nodeType": "InheritanceSpecifier",
            "src": "949:21:25"
          }
        ],
        "canonicalName": "ICoWSwapEthFlow",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 24437,
          "nodeType": "StructuredDocumentation",
          "src": "849:71:25",
          "text": "@title CoW Swap ETH Flow Interface\n @author CoW Swap Developers"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          24512,
          24436
        ],
        "name": "ICoWSwapEthFlow",
        "nameLocation": "930:15:25",
        "scope": 24513,
        "usedErrors": [
          24444,
          24447,
          24450,
          24453,
          24458,
          24461
        ]
      }
    ],
    "license": "LGPL-3.0-or-later"
  },
  "id": 25
}